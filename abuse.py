#!/usr/bin/env python3

import io
import json
import os
import pyzipper
import requests

class MalwareBazaar:

    BAZAAR_API_URL = 'https://mb-api.abuse.ch/api/v1/'
    BAZAAR_SAMPLE_BASE_URL = 'https://bazaar.abuse.ch/sample/'
    SAMPLE_PASSWORD = b'infected'
    
    def __init__(self, api_key=None):
        self.api_key = api_key

    def __post_api_request(self, post_form_data):

        res = requests.post(MalwareBazaar.BAZAAR_API_URL, data=post_form_data)
        res.raise_for_status()

        return json.loads(res.content)

    def upload_file(**args):
        raise NotImplementedError()

    def get_file(self, sha256_hash):

        post_form_data = {
            'query': 'get_file',
            'sha256_hash': sha256_hash
        }

        res = requests.post(MalwareBazaar.BAZAAR_API_URL, data=post_form_data)
        res.raise_for_status()

        archive_in_mem_file = io.BytesIO(res.content)
        archive = pyzipper.AESZipFile(
                archive_in_mem_file, compression=pyzipper.ZIP_DEFLATED,
                encryption=pyzipper.WZ_AES
        )
        archive.setpassword(MalwareBazaar.SAMPLE_PASSWORD)

        return {'name': archive.read(name) for name in archive.namelist()}

    def get_info(self, sha256_hash):
        return self.__post_api_request(
            {
                'query': 'get_info',
                'hash': sha256_hash
            }
        )

    def get_taginfo(self, tag, limit=100):
        return self.__post_api_request(
            {
                'query': 'get_taginfo',
                'tag': tag,
                'limit': limit
            }
        )

    def get_siginfo(self, signature, limit=100):
        return self.__post_api_request(
            {
                'query': 'get_siginfo',
                'signature': signature,
                'limit': limit
            }
        )

    def get_file_type(self, file_type, limit=100):
        return self.__post_api_request(
            {
                'query': 'get_file_type',
                'file_type': file_type,
                'limit': limit
            }
        )

    def get_clamavinfo(self, clamav, limit=100):
        return self.__post_api_request(
            {
                'query': 'get_clamavinfo',
                'clamav': clamav,
                'limit': limit
            }
        )

    def get_imphash(self, imphash, limit=100):
        return self.__post_api_request(
            {
                'query': 'get_imphash',
                'imphash': imphash,
                'limit': limit
            }
        )

    def get_tlsh(self, tlsh, limit=100):
        return self.__post_api_request(
            {
                'query': 'get_tlsh',
                'tlsh': tlsh,
                'limit': limit
            }
        )

    def get_telfhash(self, telfhash, limit=100):
        return self.__post_api_request(
            {
                'query': 'get_telfhash',
                'telfhash': telfhash,
                'limit': limit
            }
        )

    def get_gimphash(self, gimphash, limit=100):
        return self.__post_api_request(
            {
                'query': 'get_gimphash',
                'gimphash': gimphash,
                'limit': limit
            }
        )

    def get_dhash_icon(self, dhash_icon, limit=100):
        return self.__post_api_request(
            {
                'query': 'get_dhash_icon',
                'dhash_icon': dhash_icon,
                'limit': limit
            }
        )

    def get_yarainfo(self, yara_rule, limit=100):
        return self.__post_api_request(
            {
                'query': 'get_yarainfo',
                'yara_rule': yara_rule,
                'limit': limit
            }
        )

    def get_issuerinfo(self, issuer_cn, limit=100):
        return self.__post_api_request(
            {
                'query': 'get_issuerinfo',
                'issuer_cn': issuer_cn,
                'limit': limit
            }
        )

    def get_subjectinfo(self, subject_cn, limit=100):
        return self.__post_api_request(
            {
                'query': 'get_subjectinfo',
                'subject_cn': subject_cn,
                'limit': limit
            }
        )

    def get_certificate(self, subject_cn, limit=100):
        return self.__post_api_request(
            {
                'query': 'get_certificate',
                'subject_cn': subject_cn,
                'limit': limit
            }
        )

    def update(**args):
        raise NotImplementedError()

    def add_comment(**args):
        raise NotImplementedError()

    def get_recent(self, selector=100):
        return self.__post_api_request(
            {
                'query': 'get_recent',
                'selector': selector,
            }
        )

    def get_cscb(self):
        return self.__post_api_request(
            {
                'query': 'get_cscb',
            }
        )

    @staticmethod
    def build_sample_url(sha256_hash):
        return f'{MalwareBazaar.BAZAAR_SAMPLE_BASE_URL}{sha256_hash}'
